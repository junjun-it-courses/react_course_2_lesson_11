Разработка любого проекта начинается с файловой структуры, будь то обычная верстка
или сложный проект с использованием JS логики или даже JS Фреймворков.

Нет каких-то законов по созданию файловой структуры которым следует следовать, но
есть некоторые устоявшиеся правила которых лучше придерживаться.

1. Мы разделяем ту версию проекта в которой ведется разработка, обычно она называется
dist

2. Готовая версия нашего проекта называется build, это та версия которую мы будем
отдавать заказчику или заливать на сервер.

3. Разработчик не должен руками лезть в директорию build и изменять в ней что-то сам,
напротив мы работаем только в директории dist, а gulp сам будет создавать и наполнять
наш build нужными файлами.

Примерная структура проекта выглядит следующим образом:

project-name/
├── build/
├── dist/
│   ├── scss/
│   │   └── common/
│   │   │    └── reset.scss
│   │   │    └── extends.scss
│   │   │    └── mixins.scss
│   │   │    └── variables.scss
│   │   │    └── animations.scss
│   │   │    └── media.scss
│   │   │    └── index.scss
│   │   └── components/
│   │   │    └── component-name1/
│   │   │    │  └── component-name1.scss
│   │   │    │  └── component-name1-media.scss
│   │   │    │  └── index.scss
│   │   │    └── component-name2/
│   │   │    │  └── component-name2.scss
│   │   │    │  └── component-name2-media.scss
│   │   │    │  └── index.scss
│   │   └── index.scss
│   ├── pages/
│   │   ├── index.html
│   │   ├── another-page.html
├── gulpfile.js
├── package.json
├── package-lock.json
├── .gitignore
└── node_modules/


Файлы в директории dist могут быть разные так как это не конечная структура и она
может расширяться или изменяться
