В примере ранее был указан чёткий путь к файлу, который мы хотим скопировать.
Для небольших проектов это может быть достаточно простым и эффективным решением,
но, зачастую необходимо обработать не один, а все файлы из определённой директории
или даже дерева директорий. К примеру, у нас возможна вот такая структура стилей:

layout-project/
├── dist/
│   ├── sass/
│   │   ├── global.scss
│   │   ├── mobile.scss
│   │   ├── desktop.scss

Как корректно обработать три этих файла? Есть два варианта:

1. Обработать каждый файл в отдельности
2. Обработать все файлы внутри одной функции

С первым вариантом всё просто — создаём три функции,
объединяем их в единую задачу и выполняем:

См. ./../lesson-files/gulpfile [globs-first].js

Если всего файла три, то такое решение можно считать нормальным, но не хорошим.
Ведь над каждым файлом производится одинаковая операция, а меняется только сам
обрабатываемый файл.



Для указания нескольких файлов используются специальные шаблоны путей — Globs.
Это небольшой пакет, который преобразует шаблоны в пути и по умолчанию встроен в
Gulp. Достаточно изучить пару приёмов, с помощью которых вы сможете выбирать
почти любые файлы и в любом количестве.

Первая конструкция — использование звёздочки *, она указывает на то, что надо
выбрать всё, что не противоречит указанному в пути. Например, мы можем заменить
звёздочкой имя файла в последнем примере и, тогда, Gulp выберет все три файла:
global.scss, mobile.scss и desktop.scss

См. ./../lesson-files/gulpfile [globs-second].js


Можно ещё больше упростить процесс копирования файлов. Предположим, что
SASS файлы находятся в совершенно разных директориях, а мы хотим сложить их в
единую. Необходимо пройтись по всем доступным директориям, проверить наличие там
файла с расширением scss/sass и скопировать. Для этого используется специальная
конструкция **, которая нацелена на проход по директориям. Например, можно
видоизменить код следующим образом:

См. ./../lesson-files/gulpfile [globs-third].js

Теперь при запуске задачи будут проверены все директории внутри dist на
предмет наличия файла с расширением .scss. Здесь важно отметить, поиск будет
производиться не только внутри поддиректорий dist, но и в самой директории dist.
Например будут выбраны следующие файлы:

dist/styles.scss
dist/project/app/styles/app.scss
dist/sass/mobile.scss
и так далее.

Важно: при использовании метода с поиском файлов в различных директориях, при их
переносе с помощью функции dest() Gulp сохраняет ту вложенность, которая была.
Например, при выполнении прошлого примера файл dist/project/app/styles/app.scss
окажется по пути build/styles/project/app/styles/app.scss. Это важная особенность,
которую стоит помнить для избежания ошибок при работе с проектом.


Это отлично работает, но есть одна существенная проблема — внутри нашего dist могут
находиться директории, из которых нет необходимости обрабатывать файлы. Например,
директории с npm-пакетами. Чтобы уйти от этой проблемы в Globs существует метод
исключения директорий, который указывается через знак логического отрицания !. В
таком случае нужные пути и исключаемые указываются в виде массива строк. Исключим
из копирования директорию dist/project:

См. ./../lesson-files/gulpfile [globs-fourth].js

Важно обратить внимание, что в конце исключаемой директории стоят символы /**.
Они говорят о том, что необходимо исключить не только саму директорию, но и все
вложенные в неё.
